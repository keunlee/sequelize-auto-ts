////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
// See sequelize-auto-ts for edits
//
////////////////////////////////////////////////////////////////////

'depends typescript-client-server-compat.js';

import types = require('./sequelize-types');

export interface SequelizeNames {
    TableNames: TableNames;
    calculatedFields:CalculatedFields;
    references:References;<%
    schema.tables.forEach(function(table){%>
    <%- table.tableNameSingularCamel()%>Fields:<%- table.tableNamePascal()%>Fields;<%
    }); %>
}

export class TableNames {<%
    schema.tables.forEach(function(table){%>
    <%- table.tableNameModelSnake()%>:string = '<%- table.tableNameModel()%>';<%
    }); %>
}
export var tableNames:TableNames = new TableNames();
<%
    schema.tables.forEach(function(table){%>
export class <%- table.tableNamePascal()%>Fields {<%
    table.fields.forEach(function(field){%>
    <%- field.fieldName%>:string = '<%- field.fieldName;%>';<%
});%>
}
export var <%- table.tableNameCamel()%>Fields:<%- table.tableNamePascal()%>Fields = new <%- table.tableNamePascal()%>Fields();

<%}); %>
export class CalculatedFields {<%
    schema.calculatedFields.forEach(function(calc){%>
    <%- calc.fieldName%>:string = '<%- calc.fieldName()%>';<%
}); %>}
export var calculatedFields:CalculatedFields = new CalculatedFields();

export class References {<%
    schema.uniqueReferences().forEach(function(ref){%>
    <%- ref.foreignKey%>:types.Reference = { tableName: '<%- ref.primaryTableNameModel()%>', primaryKey: '<%- ref.primaryKey%>', foreignKey: '<%- ref.foreignKey%>', as: <%- ref.associationNameQuoted() ? ref.associationNameQuoted() : 'undefined'%>};<%
}); %>
}

export var references:References = new References();
