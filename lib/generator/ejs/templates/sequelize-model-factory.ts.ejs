////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
// See sequelize-auto-ts for edits
//
////////////////////////////////////////////////////////////////////

/// <reference path="../../typings/index.d.ts"/>

import types = require('./sequelize-types');
import sequelize = require("sequelize");
import {AssociationOptionsBelongsToMany} from "sequelize";

var Sequelize:sequelize.SequelizeStatic = require('sequelize');


export class Models {

    public SEQUELIZE:sequelize.Sequelize;
    <%schema.tables.forEach(function(table){%>
    public <%- table.tableNameCamel()%>:types.<%- table.modelTypeName()%>;<%
}); %>


    constructor(database:string, username:string, password:string, options:sequelize.Options) {

        this.SEQUELIZE = new Sequelize(database, username, password, options);
        var self:Models = this;
        <%schema.tables.forEach(function(table){%>
        this.<%- table.tableNameCamel()%> = <types.<%- table.modelTypeName()%>> this.SEQUELIZE.define<types.<%- table.instanceTypeName()%>, types.<%- table.pojoName()%>>('<%- table.tableNameSingular()%>', {<%
    table.realDbFields().forEach(function(field){%>
                '<%- field.fieldName%>': <%- field.defineFieldType();%>,<%
    });%>
            },
            {
                timestamps: false,
                classMethods: {
                    <%- table.getterName()%>: (<%- table.tableNameSingularCamel()%>:any) => {
                        var where:{[key:string]:any} = {};
                        var id:number = parseInt(<%- table.tableNameSingularCamel()%>);
                        if (isNaN(id)) {<%
                    table.realDbFields().forEach(function(field){%>
                            if (<%- table.tableNameSingularCamel()%>['<%- field.fieldName%>'] !== undefined) { where['<%- field.fieldName%>'] = <%- table.tableNameSingularCamel()%>['<%- field.fieldName%>']}<%
                    });%>
                        } else {
                            where['<%- table.idFieldName()%>'] = id;
                        }
                        return self.<%- table.tableNameCamel()%>.find({where: where});
                    }
                }
            });
        <%}); %><%
schema.references.forEach(function(ref){%>
    this.<%- ref.primaryTableNameCamel()%>.hasMany(this.<%- ref.foreignTableNameCamel()%>, {foreignKey: '<%- ref.foreignKey%>' });
    this.<%- ref.foreignTableNameCamel()%>.belongsTo(this.<%- ref.primaryTableNameCamel()%>, {
        as: <%- ref.associationNameQuoted() ? ref.associationNameQuoted() : 'undefined'%>,
        foreignKey: '<%- ref.foreignKey%>'
    });

<%}); %><%
schema.xrefs.forEach(function(xref){%>

    let associationOptions : AssociationOptionsBelongsToMany = { through: '<%- xref.xrefTableName%>' };

    this.<%- xref.firstTableNameCamel()%>.belongsToMany(<%- xref.secondTableModelName()%>, <%- xref.associationOptions%>);
    this.<%- xref.secondTableNameCamel()%>.belongsToMany(<%- xref.firstTableModelName()%>, <%- xref.associationOptions%>);

<%});
%>        }

}

interface ModelCache {
    models:Models;
    lastRetrieved:Date;
}

var modelsCache:{[key:string]: ModelCache} = {};

export function forDatabase(database:string, username?:string, password?:string, options?:sequelize.Options):Models {

    var cache:ModelCache = modelsCache[database];
    if (cache !== undefined) {
        cache.lastRetrieved = new Date();
        return cache.models;
    }

    if (typeof username !== 'string' || username.length === 0 ||
        typeof password !== 'string' || password.length === 0) {

        throw new Error('Cannot get models for database "' + database + '" since username and/or password were not ' +
            'provided and the database is not yet cached. forDatabase() must be called first with authentication ' +
            'data before it can be called with only the database name.');
    }

    cache = {
        models: new Models(database, username, password, options),
        lastRetrieved: new Date()
    };

    modelsCache[database] = cache;

    return cache.models;
}

export function clearAll():void {
    modelsCache = {};
}

export function clearDatabase(database:string):void {
    delete modelsCache[database];
}

export function clearNotUsedSince(date:Date):void {
    var time:number = date.getTime();

    var allKeys:string[] = Object.keys(modelsCache);
    var clearKeys:string[] = allKeys.filter(key => modelsCache[key].lastRetrieved.getTime() < time);

    if (clearKeys.length === 0) {
        return;
    }

    if (clearKeys.length === allKeys.length) {
        clearAll();
        return;
    }

    clearKeys.forEach(key => clearDatabase(key));
}
