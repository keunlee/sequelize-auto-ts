////////////////////////////////////////////////////////////////////
//
// GENERATED CLASS
//
// DO NOT EDIT
//
// See sequelize-auto-ts for edits
//
////////////////////////////////////////////////////////////////////

/// <reference path="../../typings/index.d.ts"/>

import sequelize = require('sequelize');
import types = require('./sequelize-types');

var Sequelize:sequelize.SequelizeStatic = require('sequelize');

export var initialized:boolean = false;
export var SEQUELIZE:sequelize.Sequelize;
<%schema.tables.forEach(function(table){%>
export var <%- table.modelTypeName()%>:types.<%- table.modelTypeName()%>;<%
}); %>


export function initialize(database:string, username:string, password:string, options:sequelize.Options):any
{
    if (initialized)
    {
        return;
    }

    SEQUELIZE = new Sequelize(database, username, password, options);
    <%schema.tables.forEach(function(table){%>
    <%- table.modelTypeName()%> = <types.<%- table.modelTypeName()%>> SEQUELIZE.define<types.<%- table.instanceTypeName()%>, types.<%- table.pojoName()%>>('<%- table.tableNameSingular()%>', {<%
    table.realDbFields().forEach(function(field){%>
        '<%- field.fieldName%>': <%- field.defineFieldType();%>,<%
    });%>
        },
        {
            classMethods: {
                <%- table.getterName()%>:(<%- table.tableNameSingularCamel()%>:any) => {
                    var where:{[key:string]:any} = {};
                    var id:number = parseInt(<%- table.tableNameSingularCamel()%>);
                    if (isNaN(id)) {<%
                    table.realDbFields().forEach(function(field){%>
                        if (<%- table.tableNameSingularCamel()%>['<%- field.fieldName%>'] !== undefined) { where['<%- field.fieldName%>'] = <%- table.tableNameSingularCamel()%>['<%- field.fieldName%>']}<%
                    });%>
                    } else {
                        where['<%- table.idFieldName()%>'] = id;
                    }
                    return <%- table.modelTypeName()%>.find({where: where});
                }
            }
        });
<%}); %><%
schema.references.forEach(function(ref){%>
    <%- ref.primaryTableModelName()%>.hasMany(<%- ref.foreignTableModelName()%>, {foreignKey: '<%- ref.foreignKey%>' });
    <%- ref.foreignTableModelName()%>.belongsTo(<%- ref.primaryTableModelName()%>, {as: <%- ref.associationNameQuoted() ? ref.associationNameQuoted() : 'undefined'%>, foreignKey: '<%- ref.foreignKey%>' });

<%}); %><%
schema.xrefs.forEach(function(xref){%>
    <%- xref.firstTableModelName()%>.belongsToMany(<%- xref.secondTableModelName()%>, {through: '<%- xref.xrefTableName%>' });
    <%- xref.secondTableModelName()%>.belongsToMany(<%- xref.firstTableModelName()%>, {through: '<%- xref.xrefTableName%>' });

<%}); %>
    return exports;
}
